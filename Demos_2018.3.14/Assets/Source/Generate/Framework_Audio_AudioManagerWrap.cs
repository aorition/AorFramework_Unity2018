//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Framework_Audio_AudioManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Framework.Audio.AudioManager), typeof(Framework.ManagerBase));
		L.RegFunction("CreateInstance", CreateInstance);
		L.RegFunction("CreateInstanceOnGameObject", CreateInstanceOnGameObject);
		L.RegFunction("Request", Request);
		L.RegFunction("IsInit", IsInit);
		L.RegFunction("PlayOneShot", PlayOneShot);
		L.RegFunction("PlayClipOneShot", PlayClipOneShot);
		L.RegFunction("Play", Play);
		L.RegFunction("PlayClip", PlayClip);
		L.RegFunction("PlayLoop", PlayLoop);
		L.RegFunction("PlayClipLoop", PlayClipLoop);
		L.RegFunction("Stop", Stop);
		L.RegFunction("StopClip", StopClip);
		L.RegFunction("StopClipLoop", StopClipLoop);
		L.RegFunction("StopAllAC", StopAllAC);
		L.RegFunction("PlayBGM", PlayBGM);
		L.RegFunction("PlayBGMClip", PlayBGMClip);
		L.RegFunction("StopBGM", StopBGM);
		L.RegFunction("StopBGMClip", StopBGMClip);
		L.RegFunction("StopAllBGM", StopAllBGM);
		L.RegFunction("StopAll", StopAll);
		L.RegFunction("IsBGMPlaying", IsBGMPlaying);
		L.RegFunction("IsAcPlaying", IsAcPlaying);
		L.RegFunction("GetAudioSourceByPath", GetAudioSourceByPath);
		L.RegFunction("GetAudioSourceByClip", GetAudioSourceByClip);
		L.RegFunction("GetPlayingAudioSources", GetPlayingAudioSources);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ACChannelLimit", get_ACChannelLimit, set_ACChannelLimit);
		L.RegVar("BGMChannelLimit", get_BGMChannelLimit, set_BGMChannelLimit);
		L.RegVar("AudioClipCacheLimit", get_AudioClipCacheLimit, set_AudioClipCacheLimit);
		L.RegVar("AudioClipCacheSurvivalSeconds", get_AudioClipCacheSurvivalSeconds, set_AudioClipCacheSurvivalSeconds);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("HasInstance", get_HasInstance, null);
		L.RegVar("Mute", get_Mute, set_Mute);
		L.RegVar("MuteAC", get_MuteAC, set_MuteAC);
		L.RegVar("MuteBGM", get_MuteBGM, set_MuteBGM);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateInstance(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Framework.Audio.AudioManager o = Framework.Audio.AudioManager.CreateInstance();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				Framework.Audio.AudioManager o = Framework.Audio.AudioManager.CreateInstance(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.CreateInstance");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateInstanceOnGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			Framework.Audio.AudioManager o = Framework.Audio.AudioManager.CreateInstanceOnGameObject(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Request(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 1);
			Framework.Audio.AudioManager.Request(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = Framework.Audio.AudioManager.IsInit();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayOneShot(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.PlayOneShot(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.PlayOneShot(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.PlayOneShot");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayClipOneShot(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
				obj.PlayClipOneShot(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.PlayClipOneShot(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.PlayClipOneShot");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<Framework.Audio.AudioManager, string, System.Action<UnityEngine.AudioSource>>(L, 1))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.AudioSource> arg1 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 3);
				obj.Play(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<Framework.Audio.AudioManager, string, System.Action<UnityEngine.AudioSource>>(L, 1) && TypeChecker.CheckParamsType<object>(L, 4, count - 3))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.AudioSource> arg1 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 3);
				object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
				obj.Play(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.Play");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayClip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<Framework.Audio.AudioManager, UnityEngine.AudioClip, System.Action<UnityEngine.AudioSource>>(L, 1))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 2);
				System.Action<UnityEngine.AudioSource> arg1 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 3);
				obj.PlayClip(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<Framework.Audio.AudioManager, UnityEngine.AudioClip, System.Action<UnityEngine.AudioSource>>(L, 1) && TypeChecker.CheckParamsType<object>(L, 4, count - 3))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 2);
				System.Action<UnityEngine.AudioSource> arg1 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 3);
				object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
				obj.PlayClip(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.PlayClip");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayLoop(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<Framework.Audio.AudioManager, string, float, System.Action<UnityEngine.AudioSource>>(L, 1))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				System.Action<UnityEngine.AudioSource> arg2 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 4);
				obj.PlayLoop(arg0, arg1, arg2);
				return 0;
			}
			else if (TypeChecker.CheckTypes<Framework.Audio.AudioManager, string, float, System.Action<UnityEngine.AudioSource>>(L, 1) && TypeChecker.CheckParamsType<object>(L, 5, count - 4))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				System.Action<UnityEngine.AudioSource> arg2 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 4);
				object[] arg3 = ToLua.ToParamsObject(L, 5, count - 4);
				obj.PlayLoop(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.PlayLoop");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayClipLoop(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<Framework.Audio.AudioManager, UnityEngine.AudioClip, float, System.Action<UnityEngine.AudioSource>>(L, 1))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				System.Action<UnityEngine.AudioSource> arg2 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 4);
				obj.PlayClipLoop(arg0, arg1, arg2);
				return 0;
			}
			else if (TypeChecker.CheckTypes<Framework.Audio.AudioManager, UnityEngine.AudioClip, float, System.Action<UnityEngine.AudioSource>>(L, 1) && TypeChecker.CheckParamsType<object>(L, 5, count - 4))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				System.Action<UnityEngine.AudioSource> arg2 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 4);
				object[] arg3 = ToLua.ToParamsObject(L, 5, count - 4);
				obj.PlayClipLoop(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.PlayClipLoop");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Stop(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
			obj.StopClip(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopClipLoop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
			obj.StopClipLoop(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllAC(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			obj.StopAllAC();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBGM(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<Framework.Audio.AudioManager, string, System.Action<UnityEngine.AudioSource>>(L, 1))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.AudioSource> arg1 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 3);
				obj.PlayBGM(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<Framework.Audio.AudioManager, string, System.Action<UnityEngine.AudioSource>>(L, 1) && TypeChecker.CheckParamsType<object>(L, 4, count - 3))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.AudioSource> arg1 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 3);
				object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
				obj.PlayBGM(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.PlayBGM");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayBGMClip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<Framework.Audio.AudioManager, UnityEngine.AudioClip, System.Action<UnityEngine.AudioSource>>(L, 1))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 2);
				System.Action<UnityEngine.AudioSource> arg1 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 3);
				obj.PlayBGMClip(arg0, arg1);
				return 0;
			}
			else if (TypeChecker.CheckTypes<Framework.Audio.AudioManager, UnityEngine.AudioClip, System.Action<UnityEngine.AudioSource>>(L, 1) && TypeChecker.CheckParamsType<object>(L, 4, count - 3))
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.ToObject(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.ToObject(L, 2);
				System.Action<UnityEngine.AudioSource> arg1 = (System.Action<UnityEngine.AudioSource>)ToLua.ToObject(L, 3);
				object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
				obj.PlayBGMClip(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.PlayBGMClip");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopBGM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.StopBGM(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopBGMClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
			obj.StopBGMClip(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAllBGM(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			obj.StopAllBGM();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			obj.StopAll();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsBGMPlaying(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsBGMPlaying(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAcPlaying(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.IsAcPlaying(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAudioSourceByPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				UnityEngine.AudioSource o = obj.GetAudioSourceByPath(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.AudioSource o = obj.GetAudioSourceByPath(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.GetAudioSourceByPath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAudioSourceByClip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
				UnityEngine.AudioSource o = obj.GetAudioSourceByClip(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				UnityEngine.AudioClip arg0 = (UnityEngine.AudioClip)ToLua.CheckObject(L, 2, typeof(UnityEngine.AudioClip));
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				UnityEngine.AudioSource o = obj.GetAudioSourceByClip(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.GetAudioSourceByClip");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlayingAudioSources(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				System.Collections.Generic.List<UnityEngine.AudioSource> o = obj.GetPlayingAudioSources();
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)ToLua.CheckObject<Framework.Audio.AudioManager>(L, 1);
				bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
				System.Collections.Generic.List<UnityEngine.AudioSource> o = obj.GetPlayingAudioSources(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Audio.AudioManager.GetPlayingAudioSources");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ACChannelLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			int ret = obj.ACChannelLimit;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ACChannelLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BGMChannelLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			int ret = obj.BGMChannelLimit;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BGMChannelLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AudioClipCacheLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			int ret = obj.AudioClipCacheLimit;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AudioClipCacheLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AudioClipCacheSurvivalSeconds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			float ret = obj.AudioClipCacheSurvivalSeconds;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AudioClipCacheSurvivalSeconds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Framework.Audio.AudioManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasInstance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Framework.Audio.AudioManager.HasInstance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Mute(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			bool ret = obj.Mute;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Mute on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MuteAC(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			bool ret = obj.MuteAC;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MuteAC on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MuteBGM(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			bool ret = obj.MuteBGM;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MuteBGM on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ACChannelLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ACChannelLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ACChannelLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BGMChannelLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.BGMChannelLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BGMChannelLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AudioClipCacheLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.AudioClipCacheLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AudioClipCacheLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AudioClipCacheSurvivalSeconds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.AudioClipCacheSurvivalSeconds = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AudioClipCacheSurvivalSeconds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Mute(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Mute = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Mute on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MuteAC(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.MuteAC = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MuteAC on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MuteBGM(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Audio.AudioManager obj = (Framework.Audio.AudioManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.MuteBGM = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MuteBGM on a nil value");
		}
	}
}

