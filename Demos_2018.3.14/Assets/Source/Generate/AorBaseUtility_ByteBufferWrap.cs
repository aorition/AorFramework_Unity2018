//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AorBaseUtility_ByteBufferWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AorBaseUtility.ByteBuffer), typeof(System.Object));
		L.RegFunction("capacity", capacity);
		L.RegFunction("setCapacity", setCapacity);
		L.RegFunction("setTop", setTop);
		L.RegFunction("offset", offset);
		L.RegFunction("setOffset", setOffset);
		L.RegFunction("length", length);
		L.RegFunction("getArray", getArray);
		L.RegFunction("getHashCode", getHashCode);
		L.RegFunction("read", read);
		L.RegFunction("write", write);
		L.RegFunction("readBoolean", readBoolean);
		L.RegFunction("readByte", readByte);
		L.RegFunction("readUnsignedByte", readUnsignedByte);
		L.RegFunction("readChar", readChar);
		L.RegFunction("readShort", readShort);
		L.RegFunction("readUnsignedShort", readUnsignedShort);
		L.RegFunction("readInt", readInt);
		L.RegFunction("readFloat", readFloat);
		L.RegFunction("readLong", readLong);
		L.RegFunction("readDouble", readDouble);
		L.RegFunction("readLength", readLength);
		L.RegFunction("readData", readData);
		L.RegFunction("readString", readString);
		L.RegFunction("readUTF", readUTF);
		L.RegFunction("writeBoolean", writeBoolean);
		L.RegFunction("writeByte", writeByte);
		L.RegFunction("writeChar", writeChar);
		L.RegFunction("writeShort", writeShort);
		L.RegFunction("writeInt", writeInt);
		L.RegFunction("writeFloat", writeFloat);
		L.RegFunction("writeLong", writeLong);
		L.RegFunction("writeDouble", writeDouble);
		L.RegFunction("writeLength", writeLength);
		L.RegFunction("writeData", writeData);
		L.RegFunction("writeString", writeString);
		L.RegFunction("writeUTF", writeUTF);
		L.RegFunction("zeroOffset", zeroOffset);
		L.RegFunction("checkClass", checkClass);
		L.RegFunction("toArray", toArray);
		L.RegFunction("clear", clear);
		L.RegFunction("bytesRead", bytesRead);
		L.RegFunction("bytesWrite", bytesWrite);
		L.RegFunction("Clone", Clone);
		L.RegFunction("equals", equals);
		L.RegFunction("ToString", ToString);
		L.RegFunction("readUTFBytes", readUTFBytes);
		L.RegFunction("writeUTFBytes", writeUTFBytes);
		L.RegFunction("writeBytes", writeBytes);
		L.RegFunction("readBytes", readBytes);
		L.RegFunction("New", _CreateAorBaseUtility_ByteBuffer);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("CAPACITY", 32);
		L.RegConstant("MAX_DATA_LENGTH", 409600);
		L.RegVar("EMPTY_ARRAY", get_EMPTY_ARRAY, null);
		L.RegVar("EMPTY_STRING", get_EMPTY_STRING, null);
		L.RegVar("bytesAvailable", get_bytesAvailable, set_bytesAvailable);
		L.RegVar("top", get_top, set_top);
		L.RegVar("position", get_position, set_position);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAorBaseUtility_ByteBuffer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				AorBaseUtility.ByteBuffer obj = new AorBaseUtility.ByteBuffer();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<int>(L, 1))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				AorBaseUtility.ByteBuffer obj = new AorBaseUtility.ByteBuffer(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				AorBaseUtility.ByteBuffer obj = new AorBaseUtility.ByteBuffer(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				AorBaseUtility.ByteBuffer obj = new AorBaseUtility.ByteBuffer(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: AorBaseUtility.ByteBuffer.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int capacity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int o = obj.capacity();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setCapacity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.setCapacity(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.setTop(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int offset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int o = obj.offset();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setOffset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.setOffset(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int length(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int o = obj.length();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			byte[] o = obj.getArray();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int o = obj.getHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int read(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				byte o = obj.read(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 4)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.read(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AorBaseUtility.ByteBuffer.read");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int write(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.write(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.write(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AorBaseUtility.ByteBuffer.write");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			bool o = obj.readBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			sbyte o = obj.readByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUnsignedByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int o = obj.readUnsignedByte();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readChar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			char o = obj.readChar();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			short o = obj.readShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUnsignedShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int o = obj.readUnsignedShort();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int o = obj.readInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			float o = obj.readFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			long o = obj.readLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			double o = obj.readDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int o = obj.readLength();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			byte[] o = obj.readData();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				string o = obj.readString();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string o = obj.readString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AorBaseUtility.ByteBuffer.readString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUTF(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			string o = obj.readUTF();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.writeBoolean(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.writeByte(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeChar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.writeChar(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.writeShort(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.writeInt(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.writeFloat(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.writeLong(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.writeDouble(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.writeLength(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.writeData(arg0);
				return 0;
			}
			else if (count == 4)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.writeData(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AorBaseUtility.ByteBuffer.writeData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.writeString(arg0);
				return 0;
			}
			else if (count == 3)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.writeString(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AorBaseUtility.ByteBuffer.writeString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeUTF(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.writeUTF(arg0);
				return 0;
			}
			else if (count == 4)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				obj.writeUTF(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AorBaseUtility.ByteBuffer.writeUTF");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int zeroOffset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			obj.zeroOffset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int checkClass(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj.checkClass(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int toArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			byte[] o = obj.toArray();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			obj.clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int bytesRead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			AorBaseUtility.ByteBuffer arg0 = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 2);
			object o = obj.bytesRead(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int bytesWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			AorBaseUtility.ByteBuffer arg0 = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 2);
			obj.bytesWrite(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clone(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			object o = obj.Clone();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj.equals(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readUTFBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = obj.readUTFBytes(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeUTFBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.writeUTFBytes(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int writeBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.writeBytes(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], int, int>(L, 2))
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.writeBytes(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<AorBaseUtility.ByteBuffer, uint, uint>(L, 2))
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				AorBaseUtility.ByteBuffer arg0 = (AorBaseUtility.ByteBuffer)ToLua.ToObject(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				uint arg2 = (uint)LuaDLL.lua_tonumber(L, 4);
				obj.writeBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AorBaseUtility.ByteBuffer.writeBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int readBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes<AorBaseUtility.ByteBuffer, int, int>(L, 2))
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				AorBaseUtility.ByteBuffer arg0 = (AorBaseUtility.ByteBuffer)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.readBytes(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<byte[], int, int>(L, 2))
			{
				AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)ToLua.CheckObject<AorBaseUtility.ByteBuffer>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.readBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AorBaseUtility.ByteBuffer.readBytes");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EMPTY_ARRAY(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AorBaseUtility.ByteBuffer.EMPTY_ARRAY);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EMPTY_STRING(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, AorBaseUtility.ByteBuffer.EMPTY_STRING);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bytesAvailable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)o;
			uint ret = obj.bytesAvailable;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bytesAvailable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_top(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)o;
			int ret = obj.top;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index top on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)o;
			int ret = obj.position;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bytesAvailable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)o;
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.bytesAvailable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bytesAvailable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_top(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.top = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index top on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AorBaseUtility.ByteBuffer obj = (AorBaseUtility.ByteBuffer)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}
}

