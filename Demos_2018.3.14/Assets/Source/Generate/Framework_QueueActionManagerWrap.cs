//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Framework_QueueActionManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Framework.QueueActionManager), typeof(Framework.ManagerBase));
		L.RegFunction("CreateInstance", CreateInstance);
		L.RegFunction("CreateInstanceOnGameObject", CreateInstanceOnGameObject);
		L.RegFunction("Request", Request);
		L.RegFunction("IsInit", IsInit);
		L.RegFunction("AddAction", AddAction);
		L.RegFunction("RemoveAction", RemoveAction);
		L.RegFunction("GetQueueNames", GetQueueNames);
		L.RegFunction("Next", Next);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("QueueLimit", get_QueueLimit, set_QueueLimit);
		L.RegVar("OnNullAction", get_OnNullAction, set_OnNullAction);
		L.RegVar("OnQueueOverLimit", get_OnQueueOverLimit, set_OnQueueOverLimit);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateInstance(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Framework.QueueActionManager o = Framework.QueueActionManager.CreateInstance();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				Framework.QueueActionManager o = Framework.QueueActionManager.CreateInstance(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.QueueActionManager.CreateInstance");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateInstanceOnGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			Framework.QueueActionManager o = Framework.QueueActionManager.CreateInstanceOnGameObject(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Request(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 1);
			Framework.QueueActionManager.Request(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = Framework.QueueActionManager.IsInit();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Framework.QueueActionManager obj = (Framework.QueueActionManager)ToLua.CheckObject<Framework.QueueActionManager>(L, 1);
				Framework.QueueAction arg0 = (Framework.QueueAction)ToLua.CheckObject<Framework.QueueAction>(L, 2);
				obj.AddAction(arg0);
				return 0;
			}
			else if (count == 3)
			{
				Framework.QueueActionManager obj = (Framework.QueueActionManager)ToLua.CheckObject<Framework.QueueActionManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				obj.AddAction(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Framework.QueueActionManager obj = (Framework.QueueActionManager)ToLua.CheckObject<Framework.QueueActionManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				obj.AddAction(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				Framework.QueueActionManager obj = (Framework.QueueActionManager)ToLua.CheckObject<Framework.QueueActionManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				System.Action arg1 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				System.Action arg3 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				obj.AddAction(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.QueueActionManager.AddAction");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAction(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Framework.QueueAction>(L, 2))
			{
				Framework.QueueActionManager obj = (Framework.QueueActionManager)ToLua.CheckObject<Framework.QueueActionManager>(L, 1);
				Framework.QueueAction arg0 = (Framework.QueueAction)ToLua.ToObject(L, 2);
				obj.RemoveAction(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				Framework.QueueActionManager obj = (Framework.QueueActionManager)ToLua.CheckObject<Framework.QueueActionManager>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				obj.RemoveAction(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.QueueActionManager.RemoveAction");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetQueueNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.QueueActionManager obj = (Framework.QueueActionManager)ToLua.CheckObject<Framework.QueueActionManager>(L, 1);
			System.Collections.Generic.List<string> o = obj.GetQueueNames();
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Next(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.QueueActionManager obj = (Framework.QueueActionManager)ToLua.CheckObject<Framework.QueueActionManager>(L, 1);
			obj.Next();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_QueueLimit(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Framework.QueueActionManager.QueueLimit);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnNullAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.QueueActionManager obj = (Framework.QueueActionManager)o;
			System.Action<Framework.QueueAction> ret = obj.OnNullAction;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnNullAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnQueueOverLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.QueueActionManager obj = (Framework.QueueActionManager)o;
			System.Action ret = obj.OnQueueOverLimit;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnQueueOverLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Framework.QueueActionManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_QueueLimit(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Framework.QueueActionManager.QueueLimit = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnNullAction(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.QueueActionManager obj = (Framework.QueueActionManager)o;
			System.Action<Framework.QueueAction> arg0 = (System.Action<Framework.QueueAction>)ToLua.CheckDelegate<System.Action<Framework.QueueAction>>(L, 2);
			obj.OnNullAction = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnNullAction on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnQueueOverLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.QueueActionManager obj = (Framework.QueueActionManager)o;
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 2);
			obj.OnQueueOverLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnQueueOverLimit on a nil value");
		}
	}
}

