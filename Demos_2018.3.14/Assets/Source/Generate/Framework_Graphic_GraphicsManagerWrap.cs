//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Framework_Graphic_GraphicsManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Framework.Graphic.GraphicsManager), typeof(Framework.ManagerBase));
		L.RegFunction("CreateInstance", CreateInstance);
		L.RegFunction("CreateInstanceOnGameObject", CreateInstanceOnGameObject);
		L.RegFunction("Request", Request);
		L.RegFunction("IsInit", IsInit);
		L.RegFunction("Setup", Setup);
		L.RegFunction("SetRendering", SetRendering);
		L.RegFunction("GetSubCamera", GetSubCamera);
		L.RegFunction("GetSubCameraLength", GetSubCameraLength);
		L.RegFunction("GetSubCameraNames", GetSubCameraNames);
		L.RegFunction("AddSubCamera", AddSubCamera);
		L.RegFunction("RemoveSubCamera", RemoveSubCamera);
		L.RegFunction("RegisterVisualCamera", RegisterVisualCamera);
		L.RegFunction("UnregisterVisualCamera", UnregisterVisualCamera);
		L.RegFunction("RefreshCurrentVisualCamera", RefreshCurrentVisualCamera);
		L.RegFunction("AddPostEffectComponent", AddPostEffectComponent);
		L.RegFunction("RemovePostEffectComponent", RemovePostEffectComponent);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("UseFixedUpdate", get_UseFixedUpdate, set_UseFixedUpdate);
		L.RegVar("AllowVisualCameraParamCover", get_AllowVisualCameraParamCover, set_AllowVisualCameraParamCover);
		L.RegVar("OnQualityLevelChanged", get_OnQualityLevelChanged, set_OnQualityLevelChanged);
		L.RegVar("OnMainCameraInited", get_OnMainCameraInited, set_OnMainCameraInited);
		L.RegVar("OnSubCameraInited", get_OnSubCameraInited, set_OnSubCameraInited);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("UIEffRoot", get_UIEffRoot, set_UIEffRoot);
		L.RegVar("MainCamera", get_MainCamera, null);
		L.RegVar("Effect", get_Effect, null);
		L.RegVar("CurrentVisualCamera", get_CurrentVisualCamera, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateInstance(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Framework.Graphic.GraphicsManager o = Framework.Graphic.GraphicsManager.CreateInstance();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1)
			{
				UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 1);
				Framework.Graphic.GraphicsManager o = Framework.Graphic.GraphicsManager.CreateInstance(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Graphic.GraphicsManager.CreateInstance");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateInstanceOnGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 1, typeof(UnityEngine.GameObject));
			Framework.Graphic.GraphicsManager o = Framework.Graphic.GraphicsManager.CreateInstanceOnGameObject(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Request(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action arg0 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 1);
			Framework.Graphic.GraphicsManager.Request(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = Framework.Graphic.GraphicsManager.IsInit();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Setup(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
				Framework.Graphic.GraphicsSettingAsset arg0 = (Framework.Graphic.GraphicsSettingAsset)ToLua.CheckObject<Framework.Graphic.GraphicsSettingAsset>(L, 2);
				obj.Setup(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.RectTransform>(L, 3))
			{
				Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
				Framework.Graphic.GraphicsSettingAsset arg0 = (Framework.Graphic.GraphicsSettingAsset)ToLua.CheckObject<Framework.Graphic.GraphicsSettingAsset>(L, 2);
				UnityEngine.RectTransform arg1 = (UnityEngine.RectTransform)ToLua.ToObject(L, 3);
				obj.Setup(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Camera>(L, 3))
			{
				Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
				Framework.Graphic.GraphicsSettingAsset arg0 = (Framework.Graphic.GraphicsSettingAsset)ToLua.CheckObject<Framework.Graphic.GraphicsSettingAsset>(L, 2);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.ToObject(L, 3);
				obj.Setup(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
				Framework.Graphic.GraphicsSettingAsset arg0 = (Framework.Graphic.GraphicsSettingAsset)ToLua.CheckObject<Framework.Graphic.GraphicsSettingAsset>(L, 2);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject(L, 3, typeof(UnityEngine.Camera));
				UnityEngine.RectTransform arg2 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 4, typeof(UnityEngine.RectTransform));
				obj.Setup(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Graphic.GraphicsManager.Setup");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRendering(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetRendering(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSubCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Camera o = obj.GetSubCamera(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSubCameraLength(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
			int o = obj.GetSubCameraLength();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSubCameraNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
			string[] o = obj.GetSubCameraNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSubCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 2, typeof(UnityEngine.Camera));
			obj.AddSubCamera(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSubCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
			UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 2, typeof(UnityEngine.Camera));
			obj.RemoveSubCamera(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterVisualCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
			Framework.Graphic.VisualCamera arg0 = (Framework.Graphic.VisualCamera)ToLua.CheckObject<Framework.Graphic.VisualCamera>(L, 2);
			obj.RegisterVisualCamera(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnregisterVisualCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
			Framework.Graphic.VisualCamera arg0 = (Framework.Graphic.VisualCamera)ToLua.CheckObject<Framework.Graphic.VisualCamera>(L, 2);
			obj.UnregisterVisualCamera(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshCurrentVisualCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
			obj.RefreshCurrentVisualCamera();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPostEffectComponent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Framework.Graphic.IRTPostEffectComponent>(L, 2))
			{
				Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
				Framework.Graphic.IRTPostEffectComponent arg0 = (Framework.Graphic.IRTPostEffectComponent)ToLua.ToObject(L, 2);
				obj.AddPostEffectComponent(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Framework.Graphic.IFLPostEffectComponent>(L, 2))
			{
				Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
				Framework.Graphic.IFLPostEffectComponent arg0 = (Framework.Graphic.IFLPostEffectComponent)ToLua.ToObject(L, 2);
				obj.AddPostEffectComponent(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Graphic.GraphicsManager.AddPostEffectComponent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemovePostEffectComponent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Framework.Graphic.IRTPostEffectComponent>(L, 2))
			{
				Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
				Framework.Graphic.IRTPostEffectComponent arg0 = (Framework.Graphic.IRTPostEffectComponent)ToLua.ToObject(L, 2);
				obj.RemovePostEffectComponent(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<Framework.Graphic.IFLPostEffectComponent>(L, 2))
			{
				Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)ToLua.CheckObject<Framework.Graphic.GraphicsManager>(L, 1);
				Framework.Graphic.IFLPostEffectComponent arg0 = (Framework.Graphic.IFLPostEffectComponent)ToLua.ToObject(L, 2);
				obj.RemovePostEffectComponent(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Framework.Graphic.GraphicsManager.RemovePostEffectComponent");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseFixedUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			bool ret = obj.UseFixedUpdate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseFixedUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllowVisualCameraParamCover(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			bool ret = obj.AllowVisualCameraParamCover;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowVisualCameraParamCover on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnQualityLevelChanged(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			System.Action<int> ret = obj.OnQualityLevelChanged;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnQualityLevelChanged on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnMainCameraInited(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			System.Action<UnityEngine.Camera,Framework.Graphic.GCamGDesInfo> ret = obj.OnMainCameraInited;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnMainCameraInited on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnSubCameraInited(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			System.Action<UnityEngine.Camera,Framework.Graphic.GCamGDesInfo> ret = obj.OnSubCameraInited;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnSubCameraInited on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Framework.Graphic.GraphicsManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIEffRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			UnityEngine.RectTransform ret = obj.UIEffRoot;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIEffRoot on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MainCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			UnityEngine.Camera ret = obj.MainCamera;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MainCamera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Effect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			Framework.Graphic.CamlensEffects ret = obj.Effect;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Effect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentVisualCamera(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			Framework.Graphic.VisualCamera ret = obj.CurrentVisualCamera;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CurrentVisualCamera on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseFixedUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UseFixedUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseFixedUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AllowVisualCameraParamCover(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AllowVisualCameraParamCover = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowVisualCameraParamCover on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnQualityLevelChanged(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			System.Action<int> arg0 = (System.Action<int>)ToLua.CheckDelegate<System.Action<int>>(L, 2);
			obj.OnQualityLevelChanged = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnQualityLevelChanged on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnMainCameraInited(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			System.Action<UnityEngine.Camera,Framework.Graphic.GCamGDesInfo> arg0 = (System.Action<UnityEngine.Camera,Framework.Graphic.GCamGDesInfo>)ToLua.CheckDelegate<System.Action<UnityEngine.Camera,Framework.Graphic.GCamGDesInfo>>(L, 2);
			obj.OnMainCameraInited = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnMainCameraInited on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnSubCameraInited(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			System.Action<UnityEngine.Camera,Framework.Graphic.GCamGDesInfo> arg0 = (System.Action<UnityEngine.Camera,Framework.Graphic.GCamGDesInfo>)ToLua.CheckDelegate<System.Action<UnityEngine.Camera,Framework.Graphic.GCamGDesInfo>>(L, 2);
			obj.OnSubCameraInited = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OnSubCameraInited on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIEffRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Framework.Graphic.GraphicsManager obj = (Framework.Graphic.GraphicsManager)o;
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 2, typeof(UnityEngine.RectTransform));
			obj.UIEffRoot = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UIEffRoot on a nil value");
		}
	}
}

